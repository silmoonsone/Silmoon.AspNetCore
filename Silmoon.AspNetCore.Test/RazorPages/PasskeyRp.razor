@page "/passkey"
@using Silmoon.AspNetCore.Encryption.JsComponents
@using Silmoon.AspNetCore.Encryption.ClientModels
@using Silmoon.AspNetCore.Encryption.Models
@using Silmoon.AspNetCore.Encryption.Services
@using Silmoon.Models
@using System.Security.Cryptography
@using Silmoon.Secure
@rendermode InteractiveServer
@attribute [Authorize]
@inject Core Core
@inject WebAuthnComponentInterop webAuthnInterop
@inject JsComponentInterop Jsc
@inject ISilmoonAuthService SilmoonAuthService
@inject NavigationManager NavigationManager
@inject BlazorWebAuthnService BlazorWebAuthnService

<h3>PasskeyRp</h3>

<hr />
<div>
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <div class="small text-secondary">username</div>
            <div class="text-primary fw-bold">@CurrentUser.Username</div>
        </div>
        <div>
            <div style="text-align: end">
                <button class="btn btn-primary btn-sm" id="enroll" @onclick="CreateWebAuthn">Add passkey</button>
                <button class="btn btn-primary btn-sm" id="signout" @onclick="() => RequestWebAuthn(true)">Request(All user)</button>
                <button class="btn btn-primary btn-sm" id="signout" @onclick="() => RequestWebAuthn(false)">Request</button>
            </div>
            <div class="mt-1" style="text-align: end">
                <button class="btn btn-primary btn-sm" id="signout" @onclick="() => AuthenticateWebAuthn(true)">Verify(All user)</button>
                <button class="btn btn-primary btn-sm" id="signout" @onclick="() => AuthenticateWebAuthn(false)">Verify</button>
            </div>
        </div>
    </div>
    <hr />
    <div>
        @if (UserWebAuthnInfos.IsNullOrEmpty())
        {
            <div class="small text-secondary">No any passkey.</div>
        }
        else
        {
            @foreach (var item in UserWebAuthnInfos)
            {
                <div class="card shadow p-3 my-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <span class="mark">[@item.PublicKeyAlgorithm]</span>
                            <span class="mark">[@item.AuthenticatorAttachment]</span>
                            <span>@item.CredentialId.GetBase64String()</span>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-danger deleteButton" @onclick="() => DeleteWebAuthn(item.CredentialId)">DELETE</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>


@code {
    List<WebAuthnInfo> UserWebAuthnInfos = [];

    User CurrentUser { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await SilmoonAuthService.GetUser<User>();
        Load();
        await base.OnInitializedAsync();
    }
    void Load()
    {
        UserWebAuthnInfos.Clear();
        var webAuthnInfos = Core.GetUserWebAuthnInfos(CurrentUser._id);
        if (!webAuthnInfos.IsNullOrEmpty()) UserWebAuthnInfos.AddRange(webAuthnInfos);
        StateHasChanged();
    }
    async void CreateWebAuthn()
    {
        var response = await BlazorWebAuthnService.Create(CurrentUser.Username, $"{CurrentUser.Username}({CurrentUser.Nickname})", CurrentUser._id.ToByteArray());
        if (response.State)
        {
            var userWebAuthInfo = response.Data.WebAuthnInfo;
            var result = Core.AddUserWebAuthnInfo(CurrentUser._id, userWebAuthInfo);
            await Jsc.Toast("CreateWebAuthn success", 3000);
            Load();
        }
        else
            await Jsc.MetroUIConfirm("Result", "Error (" + response.Message + ")");

    }
    async void RequestWebAuthn(bool allUser = false)
    {
        Credential[] cred = [];
        if (!allUser) cred = UserWebAuthnInfos.Select(x => new Credential() { Id = x.CredentialId.GetBase64String() }).ToArray();
        var webAuthnAuthenticateResponse = await BlazorWebAuthnService.Request(cred);

        if (webAuthnAuthenticateResponse.State)
        {
            var userWebAuthnInfos = Core.GetUserWebAuthnInfos(CurrentUser._id);
            var credential = userWebAuthnInfos.FirstOrDefault(c => c.CredentialId.SequenceEqual(webAuthnAuthenticateResponse.Data.RawId));

            if (credential is not null)
            {
                var verifyResult = webAuthnAuthenticateResponse.Data.VerifySignature(credential.PublicKey, credential.PublicKeyAlgorithm);

                if (verifyResult.State)
                    await Jsc.MetroUIConfirm("Result", "Success!");
                else
                    await Jsc.MetroUIConfirm("Result", "Signature error(" + verifyResult.Message + ")");
            }
            else await Jsc.MetroUIConfirm("Result", "Failed(credential is not exist)!");
        }
        else
            await Jsc.MetroUIConfirm("Result", "Error (" + webAuthnAuthenticateResponse.Message + ")");

    }

    async void AuthenticateWebAuthn(bool allUser = false)
    {
        var userId = allUser ? null : CurrentUser._id.ToString();
        var result = await BlazorWebAuthnService.Authenticate(userId);
        if (result.State)
            await Jsc.MetroUIConfirm("Result", "Success");
        else
            await Jsc.MetroUIConfirm("Result", "Error (" + result.Message + ")");

    }

    async void DeleteWebAuthn(byte[] credentialId)
    {
        await Jsc.MetroUIConfirm("确认", "确认删除(" + credentialId.GetBase64String() + ")？", true, async confirmd =>
        {
            if (confirmd)
            {
                var result = Core.DeleteUserWebAuthnInfo(CurrentUser._id, credentialId);
                if (result.State)
                {
                    Load();
                    await Jsc.Toast("删除成功");
                }
                else await Jsc.Toast("删除失败(" + result.Message + ")", 3000);
            }
        });
    }
}
