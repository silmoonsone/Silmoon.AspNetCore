@page "/passkey"
@using Silmoon.AspNetCore.Encryption
@using Silmoon.AspNetCore.Encryption.ClientModels
@using Silmoon.AspNetCore.Encryption.Models
@using Silmoon.AspNetCore.Test.Models.SubModels
@using Silmoon.Models
@using System.Security.Cryptography
@rendermode InteractiveServer
@attribute [Authorize]
@inject Core Core
@inject WebAuthnComponentInterop Wac
@inject JsComponentInterop Jsc
@inject ISilmoonAuthService SilmoonAuthService

<h3>PasskeyRp</h3>

<hr />
<div>
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <div class="small text-secondary">username</div>
            <div class="text-primary fw-bold">@CurrentUser.Username</div>
        </div>
        <div>
            <button class="btn btn-primary btn-sm" id="enroll" @onclick="CreateWebAuthn">Add passkey</button>
            <button class="btn btn-primary btn-sm" id="signout" @onclick="AuthenticateWebAuthn">Verify</button>
            <button class="btn btn-danger btn-sm" id="signout" onclick="signout()">Signout</button>
        </div>
    </div>
    <hr />
    <div>
        @if (UserWebAuthnInfos.IsNullOrEmpty())
        {
            <div class="small text-secondary">No any passkey.</div>
        }
        else
        {
            @foreach (var item in UserWebAuthnInfos)
            {
                <div class="card shadow p-3 my-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <span class="mark">[@item.PublicKeyAlgorithm]</span>
                            <span class="mark">[@item.AuthenticatorAttachment]</span>
                            <span>@item.CredentialId.GetBase64String()</span>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-danger deleteButton" @onclick="() => DeleteWebAuthn(item.CredentialId)">DELETE</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

</div>


@code {
    byte[] tmp { get; set; }
    List<UserWebAuthnInfo> UserWebAuthnInfos = [];

    User CurrentUser { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await SilmoonAuthService.GetUser<User>();
        Load();
        await base.OnInitializedAsync();
    }
    void Load()
    {
        UserWebAuthnInfos.Clear();
        UserWebAuthnInfos.AddRange(Core.GetUserWebAuthnInfos(CurrentUser._id));
        StateHasChanged();
    }
    async void CreateWebAuthn()
    {
        var challenge = Guid.NewGuid().ToByteArray().GetBase64String();

        await Wac.Create(
            async () =>
            {
                ClientBlazorWebAuthnOptions clientBlazorWebAuthnOptions = new ClientBlazorWebAuthnOptions()
                    {
                        Challenge = challenge,
                        Rp = new ClientBlazorWebAuthnOptions.ClientWebAuthnRp() { Id = "localhost", Name = "LocalhostTest" },
                        User = new ClientBlazorWebAuthnOptions.ClientWebAuthnUser()
                        {
                            Name = CurrentUser.Username,
                            DisplayName = $"{CurrentUser.Username}({CurrentUser.Nickname})",
                            Id = CurrentUser._id.ToByteArray().GetBase64String(),
                        },
                        AuthenticatorSelection = new ClientBlazorWebAuthnOptions.ClientWebAuthnAuthenticatorSelection() { UserVerification = "preferred" },
                    };
                return await Task.FromResult(StateFlag<ClientBlazorWebAuthnOptions>.Create(true, clientBlazorWebAuthnOptions));
            },
            async blazorWebAuthnCreateResponse =>
            {
                if (blazorWebAuthnCreateResponse.Response.Challenge == challenge)
                {

                    var userWebAuthInfo = new Models.SubModels.UserWebAuthnInfo()
                        {
                            AAGuid = blazorWebAuthnCreateResponse.AttestationObjectData.AAGUID,
                            AttestationFormat = blazorWebAuthnCreateResponse.AttestationObjectData.AttestationFormat,
                            CredentialId = blazorWebAuthnCreateResponse.AttestationObjectData.CredentialId,
                            PublicKey = blazorWebAuthnCreateResponse.AttestationObjectData.PublicKey,
                            PublicKeyAlgorithm = blazorWebAuthnCreateResponse.AttestationObjectData.PublicKeyAlgorithm,
                            SignCount = blazorWebAuthnCreateResponse.AttestationObjectData.SignCount,
                            UserVerified = blazorWebAuthnCreateResponse.AttestationObjectData.UserVerified,
                            AttestationObject = blazorWebAuthnCreateResponse.Response.AttestationObject,
                            AuthenticatorAttachment = blazorWebAuthnCreateResponse.AuthenticatorAttachment,
                        };
                    var result = Core.AddUserWebAuthnInfo(CurrentUser._id, userWebAuthInfo);
                    await Jsc.Toast("注册Passkey成功");
                    Load();
                }
                else
                    await Jsc.Toast("Challenge not found");
            }
        );
    }
    async void AuthenticateWebAuthn()
    {
        var challenge = Guid.NewGuid().ToByteArray().GetBase64String();

        await Wac.Authenticate(
            async () =>
            {
                ClientBlazorWebAuthnAuthenticateOptions options = new ClientBlazorWebAuthnAuthenticateOptions()
                    {
                        Challenge = challenge,
                        RpId = "localhost",
                        AllowCredentials = UserWebAuthnInfos.Select(x => new Credential() { Id = x.CredentialId.GetBase64String() }).ToArray(),
                    };
                return await Task.FromResult(StateFlag<ClientBlazorWebAuthnAuthenticateOptions>.Create(true, options));
            },
            async blazorWebAuthnAuthenticateResponse =>
            {
                if (blazorWebAuthnAuthenticateResponse.Response.Challenge == challenge)
                {
                    var userWebAuthnInfos = Core.GetUserWebAuthnInfos(CurrentUser._id);
                    var credential = userWebAuthnInfos.FirstOrDefault(c => c.CredentialId.SequenceEqual(blazorWebAuthnAuthenticateResponse.RawId));

                    var verifyResult = blazorWebAuthnAuthenticateResponse.VerifySignal(credential.PublicKey, credential.PublicKeyAlgorithm);

                    if (verifyResult.State)
                        await Jsc.MetroUIConfirm("Result", "Success!");
                    else
                        await Jsc.MetroUIConfirm("Result", "Signature error(" + verifyResult.Message + ")");
                }
                else
                    await Jsc.Toast("Challenge not found");
            }
        );
    }
    async void DeleteWebAuthn(byte[] credentialId)
    {
        tmp = credentialId;
        await Jsc.MetroUIConfirm("确认", "确认删除(" + credentialId.GetBase64String() + ")？", true, async confirmd =>
        {
            if (confirmd)
            {
                var result = Core.DeleteUserWebAuthnInfo(CurrentUser._id, tmp);
                if (result.State)
                {
                    Load();
                    await Jsc.Toast("删除成功");
                }
                else await Jsc.Toast("删除失败(" + result.Message + ")", 3000);
            }
        });
    }
}
