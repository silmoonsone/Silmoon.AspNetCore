@page "/js-test"
@rendermode InteractiveServer
@inject JsComponentInterop Jsc
@inject IJSRuntime Js
<h3>JsTestRp</h3>

<div>
    <button @onclick="Toast">Toast</button>
    <button @onclick="MetroUIConfirm">MetroUIConfirm</button>
    <button @onclick="Alert">Alert</button>
    <button @onclick="Confirm">Confirm</button>
    <button @onclick="Download">Download</button>
    <button @onclick="Copy">Copy</button>
    <button @onclick="CopyElement">CopyElement</button>
</div>
<div id="text">@DateTime.Now.ToString()</div>

@code {
    private async Task Toast()
    {
        await Jsc.Toast("hello");
    }
    private async Task MetroUIConfirm()
    {
        await Jsc.MetroUIConfirm("title", "msg: now is " + DateTime.Now, true, async result =>
        {
            if (result)
            {
                await Jsc.Toast("confirm is true");
            }
            else
            {
                await Jsc.Toast("confirm is false");
            }
        });
    }
    private async Task Alert()
    {
        await Jsc.Alert("hello world");
    }
    private async Task Confirm()
    {
        var result = await Jsc.Confirm("hello world");
        if (result)
        {
            await Jsc.Toast("confirm is true");
        }
        else
        {
            await Jsc.Toast("confirm is false");
        }
    }
    private async Task Download()
    {
        // var result = await Jsc.Download("data.json", "{\"id\":1}".GetBytes(), "application/json");
        var result = await Jsc.Download("data.json", "{\"id\":1}", "application/json");
        await Jsc.MetroUIConfirm("download", result.State ? "success" : "fail", false);
    }
    private async Task Copy()
    {
        await Jsc.CopyText(DateTime.Now.ToString());
    }
    private async Task CopyElement()
    {
        var result = await Jsc.CopyElementText("text", false);
        await Jsc.Toast("result: " + result);
    }
}