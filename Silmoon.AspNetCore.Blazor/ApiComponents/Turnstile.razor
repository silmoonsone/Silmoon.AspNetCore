@using Microsoft.JSInterop
@if (showScriptTag)
{
    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=____turnstileRender" async defer></script>
}
<div id="____turnstile"></div>
<div id="____turnstileWaitingMessage">@WaitingMessage</div>
<script>
    var ____turnstileResponse;
    var ____dotNetInvokeObj;
    var ____turnstileRendered = false;

    function ____turnstileRender() {
        ____turnstileLoaded = true;
        ____turnstileRendered = true;
        turnstile.render('#____turnstile', {
            sitekey: '@SiteKey',
            callback: function (token) {
                document.getElementById("____turnstileWaitingMessage").style.display = "none";
                ____turnstileResultCallback(token);
            },
        });
    };

    function ____turnstileResultCallback(token) {
        ____turnstileResponse = token;
        ____dotNetInvokeObj.invokeMethodAsync("__on_response_received", token);
    }
    function injectDotNetInvokeObj(obj) {
        ____dotNetInvokeObj = obj;
    }

    // window.onload = function () {
    //     if (typeof (____turnstileLoaded) != "undefined" && ____turnstileLoaded) {
    //         ____turnstileRender();
    //     }
    // }

    function ____turnstileIsLoaded() {
        if (typeof (____turnstileLoaded) == "undefined") return false;
        else return ____turnstileLoaded;
    }

    function ____turnstileIsRendered() {
        return ____turnstileRendered;
    }
</script>

@code
{
    [Parameter]
    public string Response { get; set; }

    [Parameter]
    public EventCallback<string> ResponseChanged { get; set; }

    [Parameter]
    public string SiteKey { get; set; } = "1x00000000000000000000AA";

    [Parameter]
    public string WaitingMessage { get; set; } = "等待人机测试结果...";

    [Inject] IJSRuntime Js { get; set; }

    bool showScriptTag = false;

    [JSInvokable]
    public void __on_response_received(string response)
    {
        Response = response;
        ResponseChanged.InvokeAsync(response);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        var isLoaded = await Js.InvokeAsync<bool>("____turnstileIsLoaded");

        if (!isLoaded && !showScriptTag)
        {
            showScriptTag = true;
            StateHasChanged();
        }

        if (!showScriptTag)
        {
            var isRendered = await Js.InvokeAsync<bool>("____turnstileIsRendered");
            if (!isRendered)
            {
                await Js.InvokeVoidAsync("____turnstileRender");
            }
        }

        var jsInvokeObj = DotNetObjectReference.Create(this);
        await Js.InvokeVoidAsync("injectDotNetInvokeObj", jsInvokeObj);
        await base.OnAfterRenderAsync(firstRender);
    }
}


<!--
    调用此控件的时候不得使用Server预渲染模式，如果上级Blazor页面使用了预渲染模式，就要在渲染完成后再显示本控件。
    可以再上级Blazor页面中利用重写OnAfterRenderAsync方法进行处理，如：

    bool showTurnstile = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!showTurnstile)
        {
            showTurnstile = true;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
-->
